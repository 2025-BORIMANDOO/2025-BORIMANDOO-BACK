name: Deploy to EC2 via Docker (API Only)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ap-northeast-2

      - name: Build without Tests
        run: ./gradlew clean build -x test

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Deploy on EC2
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ACCESS_TOKEN_EXPIRATION_TIME: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION_TIME }}
          JWT_REFRESH_TOKEN_EXPIRATION_TIME: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION_TIME }}
          JWT_REDIRECT_URI: ${{ secrets.JWT_REDIRECT_URI }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          KAKAO_SCOPE: ${{ secrets.KAKAO_SCOPE }}
          KAKAO_AUTH_URI: ${{ secrets.KAKAO_AUTH_URI }}
          KAKAO_TOKEN_URI: ${{ secrets.KAKAO_TOKEN_URI }}
          KAKAO_USERINFO_URI: ${{ secrets.KAKAO_USERINFO_URI }}
          KAKAO_USER_ATTRIBUTE: ${{ secrets.KAKAO_USER_ATTRIBUTE }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 --decode > key.pem
          chmod 400 key.pem

          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            echo "âœ… Logging in to ECR"
            aws ecr get-login-password --region ap-northeast-2 | \
            docker login --username AWS --password-stdin "$ECR_REPOSITORY"

            echo "ðŸ“¦ Pulling latest Docker image"
            docker pull "$ECR_REPOSITORY:latest"

            echo "ðŸ§¹ Removing previous container if exists"
            docker rm -f api-server || true

            echo "ðŸš€ Running new container"
            docker run -d --name api-server \
              -e SPRING_PROFILES_ACTIVE=api \
              -e DB_URL="$DB_URL" \
              -e DB_USERNAME="$DB_USERNAME" \
              -e DB_PASSWORD="$DB_PASSWORD" \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e S3_BUCKET="$S3_BUCKET" \
              -e AWS_REGION="$AWS_REGION" \
              -e JWT_SECRET="$JWT_SECRET" \
              -e JWT_ACCESS_TOKEN_EXPIRATION_TIME="$JWT_ACCESS_TOKEN_EXPIRATION_TIME" \
              -e JWT_REFRESH_TOKEN_EXPIRATION_TIME="$JWT_REFRESH_TOKEN_EXPIRATION_TIME" \
              -e JWT_REDIRECT_URI="$JWT_REDIRECT_URI" \
              -e KAKAO_CLIENT_ID="$KAKAO_CLIENT_ID" \
              -e KAKAO_CLIENT_SECRET="$KAKAO_CLIENT_SECRET" \
              -e KAKAO_REDIRECT_URI="$KAKAO_REDIRECT_URI" \
              -e KAKAO_SCOPE="$KAKAO_SCOPE" \
              -e KAKAO_AUTH_URI="$KAKAO_AUTH_URI" \
              -e KAKAO_TOKEN_URI="$KAKAO_TOKEN_URI" \
              -e KAKAO_USERINFO_URI="$KAKAO_USERINFO_URI" \
              -e KAKAO_USER_ATTRIBUTE="$KAKAO_USER_ATTRIBUTE" \
              -p 8080:8080 \
              "$ECR_REPOSITORY:latest"
          EOF
